plugins {
    id 'java'
}

group 'net.dungeondev'
version '1.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://repo.codemc.org/repository/maven-public/' }
    maven { url "https://repo.dmulloy2.net/repository/maven-public/" }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    compileOnly 'org.spigotmc:spigot-api:1.19.1-R0.1-SNAPSHOT'
    compileOnly group: 'io.netty', name: 'netty-all', version: '4.1.24.Final'
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.8.0";
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

test {
    useJUnitPlatform()
}

// Configure Javadoc to be resilient in environments without access to external repos
// and to not fail the build on warnings.
tasks.withType(Javadoc) {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
    // Avoid resolving external dependencies during doc generation
    classpath = files(sourceSets.main.output)
}

// Custom task to generate Javadoc without compiling or resolving external dependencies
tasks.register('localJavadoc', Javadoc) {
    description = 'Generates Javadoc without requiring external dependencies (for CI or offline use).'
    group = 'documentation'
    source = sourceSets.main.allJava
    classpath = files()
    destinationDir = file("${buildDir}/docs/localJavadoc")
    options.addStringOption('Xdoclint:none', '-quiet')
    failOnError = false
    dependsOn = []
}